var _ChartDataFailedDisplay = '<div class="alert alert-danger">Failed to load data</div>', chartTypes = { Area: { value: 0, name: "area" }, Line: { value: 0, name: "line" }, Donut: { value: 0, name: "donut" }, Bar: { value: 0, name: "bar" } }, chartOptionTypes = { Id: { value: 0, name: "id" }, String: { value: 1, name: "string" }, Callback: { value: 2, name: "callback" }, FormatCallback: { value: 3, name: "formatCallback" }, Boolean: { value: 4, name: "boolean" }, StringArray: { value: 5, name: "stringArray" }, FloatArray: { value: 6, name: "floatArray" } }, chartOptions = [{ name: "element", isRequired: !0, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar, chartTypes.Donut], optionType: chartOptionTypes.Id }, { name: "dataUrl", isRequired: !0, autoLoad: !1, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar, chartTypes.Donut], optionType: chartOptionTypes.String }, { name: "xkey", isRequired: !0, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "ykeys", isRequired: !0, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.StringArray }, { name: "labels", isRequired: !0, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.StringArray }, { name: "lineColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "lineWidth", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "pointSize", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "pointFillColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "pointStrokeColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "ymax", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "ymin", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "smooth", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.Boolean }, { name: "hideHover", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "hoverCallback", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.Callback }, { name: "parseTime", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.Boolean }, { name: "units", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "postUnits", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "preUnits", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "dateFormat", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.FormatCallback }, { name: "xLabels", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "xLabelFormat", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.FormatCallback }, { name: "yLabelFormat", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.FormatCallback }, { name: "goals", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.FloatArray }, { name: "goalStrokeWidth", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "goalLineColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "events", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "eventStrokeWidth", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "eventLineColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.StringArray }, { name: "continuousLine", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "axes", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.Boolean }, { name: "grid", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.Boolean }, { name: "gridTextColor", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "gridTextSize", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "gridTextFamily", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "gridTextWeight", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar], optionType: chartOptionTypes.String }, { name: "fillOpacity", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line], optionType: chartOptionTypes.String }, { name: "behaveLikeLine", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area], optionType: chartOptionTypes.String }, { name: "barColors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Bar], optionType: chartOptionTypes.StringArray }, { name: "stacked", isRequired: !1, autoLoad: !0, chart: [chartTypes.Bar], optionType: chartOptionTypes.Boolean }, { name: "colors", isRequired: !1, autoLoad: !0, chart: [chartTypes.Donut], optionType: chartOptionTypes.StringArray }, { name: "formatter", isRequired: !1, autoLoad: !0, chart: [chartTypes.Donut], optionType: chartOptionTypes.FormatCallback }, { name: "labelColor", isRequired: !1, autoLoad: !0, chart: [chartTypes.Donut], optionType: chartOptionTypes.String }, { name: "backgroundColor", isRequired: !1, autoLoad: !0, chart: [chartTypes.Donut], optionType: chartOptionTypes.String }, { name: "resize", isRequired: !1, autoLoad: !0, chart: [chartTypes.Area, chartTypes.Line, chartTypes.Bar, chartTypes.Donut], optionType: chartOptionTypes.Boolean }], formatters = { date: function (a, t) { return new moment(a).format(t) }, append: function (a, t) { return a + t }, prepend: function (a, t) { return t + a }, currency: function (a, t) { return a.toLocaleString("en-US", { style: "currency", currency: "USD", minimumFractionDigits: t }) }, percent: function (a, t) { return Number.parseFloat(100 * a).toFixed(t) + "%" } }; function initializeCharts() { $("div[data-chart-type]").each(function () { var a = $(this), t = a.attr("data-chart-type"), e = getChartTypeByName(t); if (null !== e) { if (null !== e) { initializeHtmlElement(a); createChart(e, a) } } else jQuery.error('The chart type "' + t + '" is invalid.') }) } function getChartTypeByName(a) { var t = ""; switch (a) { case chartTypes.Area.name: t = chartTypes.Area; break; case chartTypes.Line.name: t = chartTypes.Line; break; case chartTypes.Donut.name: t = chartTypes.Donut; break; case chartTypes.Bar.name: t = chartTypes.Bar }return t } function initializeHtmlElement(a) { a.empty() } function createChart(a, t) { var e = null, r = createOptions(t, a), i = getDataChartAttributeValue(t, "dataUrl", !1); switch (a) { case chartTypes.Area: $.getJSON(i, function (a) { r.options.data = a, e = new Morris.Area(r.options) }).fail(function () { t.html(_ChartDataFailedDisplay) }); break; case chartTypes.Line: $.getJSON(i, function (a) { r.options.data = a, e = new Morris.Line(r.options) }).fail(function () { t.html(_ChartDataFailedDisplay) }); break; case chartTypes.Bar: $.getJSON(i, function (a) { r.options.data = a, e = new Morris.Bar(r.options) }).fail(function () { t.html(_ChartDataFailedDisplay) }); break; case chartTypes.Donut: $.getJSON(i, function (a) { r.options.data = a, e = new Morris.Donut(r.options) }).fail(function () { t.html(_ChartDataFailedDisplay) }) }return e } function createOptions(a, t) { for (var e = { chartType: t, options: {} }, r = 0; r < chartOptions.length; r++)if (chartOptions[r].chart.indexOf(e.chartType) >= 0) { if (chartOptions[r].autoLoad) switch (chartOptions[r].optionType) { case chartOptionTypes.Id: setChartElementOption(a, e); break; case chartOptionTypes.Boolean: setDataChartBooleanOption(a, e, chartOptions[r].name, chartOptions[r].isRequired); break; case chartOptionTypes.String: setDataChartOption(a, e, chartOptions[r].name, chartOptions[r].isRequired); break; case chartOptionTypes.FormatCallback: setFormatCallbackOption(a, e, chartOptions[r].name, chartOptions[r].isRequired); break; case chartOptionTypes.StringArray: setStringArrayDataChartOption(a, e, chartOptions[r].name, chartOptions[r].isRequired); break; case chartOptionTypes.FloatArray: setFloatArrayDataChartOption(a, e, chartOptions[r].name, chartOptions[r].isRequired) } } else isDefined(a, chartOptions[r].name) && jQuery.error('The chart option "' + chartOptions[r].name + '" is invalid for a "' + e.chartType.name + '" chart.'); return e } function isDefined(a, t) { var e = a.attr("data-chart-" + t); return "" != e && null != e } function setChartElementOption(a, t) { var e = a.attr("Id"); "" != e && null != e && (t.options.element = getChartAttributeValue(a, "Id", !0)) } function setDataChartBooleanOption(a, t, e, r) { isDefined(a, e) && (t.options[e] = "true" == getDataChartAttributeValue(a, e, r, "false")) } function setDataChartOption(a, t, e, r) { isDefined(a, e) && (t.options[e] = getDataChartAttributeValue(a, e, r)) } function setStringArrayDataChartOption(a, t, e, r) { if (isDefined(a, e)) { var i = getDataChartAttributeValue(a, e, r).split(","); t.options[e] = i } } function setFloatArrayDataChartOption(a, t, e, r) { if (isDefined(a, e)) { var i = getDataChartAttributeValue(a, e, r).split(","); for (var n in t.options[e] = i, t.options[e]) t.options[e][n] = parseFloat(t.options[e][n]) } } function setFormatCallbackOption(a, t, e, r) { if (isDefined(a, e)) { var i = getDataChartAttributeValue(a, e, !1), n = /\s*\((.+?)\)/; if (n.test(i)) { var o = i.split(n), p = o[0], s = o[1]; null == formatters[p] ? jQuery.error('The formatter type "' + p + '" is not a recognized callback formatter.') : t.options[e] = function (a) { return formatters[p](a, s) } } else jQuery.error('The formatter text "' + i + '" is not recognized.') } } function getChartAttributeValue(a, t, e) { var r = a.attr(t); if ("" != r && null != r) return r; e && jQuery.error('The element "' + t + '" is required.') } function getDataChartAttributeValue(a, t, e) { return getChartAttributeValue(a, "data-chart-" + t, e) } $(function () { $(window).resize($.debounce(250, !0, function (a) { initializeCharts() })), initializeCharts() });